Exercise 1.1

1. emacs exer1.html Enter
2. C-s H T M L M-b
3. C-s s c a v e n g e r M-b
4. C-s s e l f - r e f e r e n t i a l M-b M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. Use keyboard shortcuts
9. No
10. C-x C-c

Exercise 1.2

1. emacs exer2.html Enter
2. M-g M-g 1 8 Enter C-k
3. C-s < ! C-a C-k
4. C-s < ! C-a C-SP C-e C-n C-n C-w
5. C-s < ! Enter C-b C-b C-SP C-s > Enter C-w C-s < ! C-a C-SP C-e C-n C-n C-n C-w C-s < ! C-a C-k
C-x C-s C-x C-c
diff -u exer1.html exer2.html >exer2.diff

Exercise 1.3

1. emacs exer3.html Enter
2. C-s " A s s i g n m e n t 1 " M-% "A s s i g n m e n t 2 1" Enter y y n
3. M-< C-s U T F - 8 M-% U S - A S C I I Enter y n
4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k
5. M-< C-s < / o C-e C-o
6. C-x C-s C-x C-c 
diff -u exer1.html exer3.html >exer3.diff

Exercise 1.4

1. cat exer2.html exer2.diff >exer4.html Enter
2. emacs exer4.html Enter
3. M-> C-r < Enter C-SP C-e M-w M-g M-g 4 0 0 Enter C-n C-y C-o 
4. M-> C-r < p > s Enter C-SP C-e M-w M-g M-g 3 8 1 Enter C-n C-y C-k C-r <! Enter C-SP C-e C-n C-n C-n M-w M-g M-g 3 8 1 Enter C-n C-n C-y C-n C-k C-k C-k  M-> C-r <! Enter C-SP C-e M-w M-g M-g 3 3 5 Enter C-n C-y M-> C-r <ht Enter C-a Right C-SP C-e M-w M-g M-g 3 3 5 Enter C-n C-n C-n C-y M-> C-r - - Enter C-a Right C-SP C-e M-w M-g M-g 3 3 5 Enter C-n C-n C-n C-n C-y C-o M-> C-r <- Enter C-SP C-e M-w M-g M-g 1 2 2 Enter C-n C-n C-y M-> C-r < ! Enter C-SP C-e M-w M-g M-g 1 5 Enter C-n C-n C-y
5. C-s + + + C-p C-a C-SP M-> C-w
6. C-x u
7. M-> - - > C-r + + + Enter C-p C-p C-o C-n < ! - -
8. M-< C-s < o l > M-% < o L > Enter y y y y y y y (There are 7 instances)

Exercise 1.5

1. e m a c s Enter M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}
3. M-x c o m p i l e Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace g c c SP h e l l o . c SP - o SP h e l l o Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5. C-SP M-> M-w C-x C-f k e y 1 . t x t M-> M-x c l i p b o a r d - y a n k Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6

1. emacs Enter C-x b Enter
2. ( r a n d o m SP " 1 0 4 - 9 2 8 - 9 9 1 " ) C-j
Result: -2074395510855685025
3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j
4. ( * SP x SP y ) C-j 
Result: 1722469168195893536
I observe that the answer is not mathematically correct
5. M-: ( * SP x SP y ) Enter
There is no difference in the output but include octadecimal and hexadecimal values
6. The random number generator is not truly random. No matter what you do, the random seed assigns the same random values.
7. m o s t - p o s i t i v e - f i x n u m C-j m o s t - n e g a t i v e - f i x n u m C-j
The random function generates numbers between these two numbers. This causes the products to almost be wrong with certainty. 

